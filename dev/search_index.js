var documenterSearchIndex = {"docs":
[{"location":"aladin/#ALADIN","page":"ALADEN","title":"ALADIN","text":"","category":"section"},{"location":"aladin/","page":"ALADEN","title":"ALADEN","text":"CurrentModule = PMADA","category":"page"},{"location":"aladin/","page":"ALADEN","title":"ALADEN","text":"TODO","category":"page"},{"location":"app/#APP","page":"APP","title":"APP","text":"","category":"section"},{"location":"app/","page":"APP","title":"APP","text":"CurrentModule = PMADA","category":"page"},{"location":"app/","page":"APP","title":"APP","text":"solve_dopf_app","category":"page"},{"location":"app/#PMADA.solve_dopf_app","page":"APP","title":"PMADA.solve_dopf_app","text":"solve_dopf_app(data::Dict{String, <:Any}, model_type::DataType, optimizer; \nmismatch_method::String=\"norm\",tol::Float64=1e-4, max_iteration::Int64=1000, \nverbose = true, print_optimizer_info::Bool=false, \nalpha::Real=1000, beta::Real, gamma::Real)\n\nSolve the distributed OPF problem using APP algorithm.\n\nArguments:\n\ndata::Dict{String, <:Any} : dictionary contains case in PowerModel format\nmodel_type::DataType : power flow formulation (PowerModel type)\noptimizer : optimizer JuMP initiation object\nmismatch_method::String=\"norm\" : mismatch calculation method (norm, max)\ntol::Float64=1e-4 : mismatch tolerance\nmax_iteration::Int64=1000 : maximum number of iteration\nverbose::Bool=true : print mismatch after each iteration and result summary \nprintoptimizerinfo::Bool=false : print local optimization info from the solver\nalpha::Real= 1000 : algorithm parameters\nbeta::Real= 2alpha : algorithm parameters\ngamma::Real= alpha : algorithm parameters\n\n\n\n\n\n","category":"function"},{"location":"app/","page":"APP","title":"APP","text":"Modules = [PMADA.app_methods]","category":"page"},{"location":"app/#PMADA.app_methods","page":"APP","title":"PMADA.app_methods","text":"APP algorithm module contians build and update methods\n\n\n\n\n\n","category":"module"},{"location":"app/#PMADA.app_methods.build_method-Tuple{AbstractPowerModel}","page":"APP","title":"PMADA.app_methods.build_method","text":"build PowerModel using APP algorithm\n\n\n\n\n\n","category":"method"},{"location":"app/#PMADA.app_methods.initialize_method-Tuple{Dict{String, var\"#s110\"} where var\"#s110\", Type}","page":"APP","title":"PMADA.app_methods.initialize_method","text":"inilitlize the APP algorithm\n\n\n\n\n\n","category":"method"},{"location":"app/#PMADA.app_methods.objective_app-Tuple{AbstractPowerModel}","page":"APP","title":"PMADA.app_methods.objective_app","text":"set the APP algorithm objective\n\n\n\n\n\n","category":"method"},{"location":"app/#PMADA.app_methods.solve_method","page":"APP","title":"PMADA.app_methods.solve_method","text":"redefine the main call method inside the module\n\n\n\n\n\n","category":"function"},{"location":"app/#PMADA.app_methods.update_method-Tuple{Dict{String, var\"#s110\"} where var\"#s110\"}","page":"APP","title":"PMADA.app_methods.update_method","text":"update the APP algorithm before each iteration\n\n\n\n\n\n","category":"method"},{"location":"library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/","page":"Library","title":"Library","text":"CurrentModule = PMADA","category":"page"},{"location":"library/","page":"Library","title":"Library","text":"Modules = [PMADA]\nPages   = [\"base.jl\", \"data.jl\", \"data_sharing.jl\", \"opf.jl\", \"util.jl\", \"variables.jl\"]","category":"page"},{"location":"library/#PMADA._var-Tuple{AbstractPowerModel, String, String}","page":"Library","title":"PMADA._var","text":"return JuMP variable object from PowerModel object\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.arrange_areas_id!-Tuple{Dict{String, var\"#s80\"} where var\"#s80\"}","page":"Library","title":"PMADA.arrange_areas_id!","text":"arrange area id from 1 to number of areas this step is necessary when having area number 0 and using central coordinator\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.calc_global_mismatch","page":"Library","title":"PMADA.calc_global_mismatch","text":"calculate the global mismatch based on local mismatch\n\n\n\n\n\n","category":"function"},{"location":"library/#PMADA.calc_mismatch!","page":"Library","title":"PMADA.calc_mismatch!","text":"calc_mismatch!(data::Dict{String, <:Any},method::String=\"norm\"; p::Int64=2)\n\ncalculate the mismatch using p-norm and return the area data dictionary with the mismatch as seen by the area.\n\n\n\n\n\n","category":"function"},{"location":"library/#PMADA.get_area_id-Tuple{AbstractPowerModel}","page":"Library","title":"PMADA.get_area_id","text":"helper functions to handle area ids, local buses, neighbor buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.get_area_id-Tuple{Dict{String, var\"#s82\"} where var\"#s82\"}","page":"Library","title":"PMADA.get_area_id","text":"helper functions to handle area ids, local buses, neighbor buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.get_areas_bus-Tuple{AbstractPowerModel}","page":"Library","title":"PMADA.get_areas_bus","text":"helper functions to handle area ids, local buses, neighbor buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.get_areas_bus-Tuple{Dict{String, var\"#s41\"} where var\"#s41\"}","page":"Library","title":"PMADA.get_areas_bus","text":"helper functions to handle area ids, local buses, neighbor buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.get_areas_id-Tuple{AbstractPowerModel}","page":"Library","title":"PMADA.get_areas_id","text":"helper functions to handle area ids, local buses, neighbor buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.get_areas_id-Tuple{Dict{String, var\"#s80\"} where var\"#s80\"}","page":"Library","title":"PMADA.get_areas_id","text":"helper functions to handle area ids, local buses, neighbor buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.get_local_bus-Tuple{AbstractPowerModel, Int64}","page":"Library","title":"PMADA.get_local_bus","text":"helper functions to handle area ids, local buses, neighbor buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.get_local_bus-Tuple{Dict{String, var\"#s44\"} where var\"#s44\", Int64}","page":"Library","title":"PMADA.get_local_bus","text":"helper functions to handle area ids, local buses, neighbor buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.get_neighbor_bus-Tuple{AbstractPowerModel, Int64}","page":"Library","title":"PMADA.get_neighbor_bus","text":"helper functions to handle area ids, local buses, neighbor buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.get_neighbor_bus-Tuple{AbstractPowerModel, Vector{T} where T}","page":"Library","title":"PMADA.get_neighbor_bus","text":"helper functions to handle area ids, local buses, neighbor buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.get_neighbor_bus-Tuple{Dict{String, var\"#s80\"} where var\"#s80\", Vector{T} where T}","page":"Library","title":"PMADA.get_neighbor_bus","text":"helper functions to handle area ids, local buses, neighbor buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.get_neighbor_bus-Tuple{Dict{String, var\"#s82\"} where var\"#s82\", Int64}","page":"Library","title":"PMADA.get_neighbor_bus","text":"helper functions to handle area ids, local buses, neighbor buses\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.get_shared_component-Tuple{AbstractPowerModel, Int64}","page":"Library","title":"PMADA.get_shared_component","text":"get the shared buses and branches between defined area and all other areas\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.get_shared_component-Tuple{AbstractPowerModel}","page":"Library","title":"PMADA.get_shared_component","text":"get the shared buses and branches between defined area and all other areas\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.get_shared_component-Tuple{Dict{String, var\"#s28\"} where var\"#s28\", Int64}","page":"Library","title":"PMADA.get_shared_component","text":"get the shared buses and branches between defined area and all other areas\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.get_shared_component-Tuple{Dict{String, var\"#s82\"} where var\"#s82\"}","page":"Library","title":"PMADA.get_shared_component","text":"get the shared buses and branches between defined area and all other areas\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.initialize_dopf_parameters!-Tuple{Dict{String, var\"#s45\"} where var\"#s45\"}","page":"Library","title":"PMADA.initialize_dopf_parameters!","text":"initialize dopf parameters\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.solve_dopf-Tuple{Dict{String, var\"#s34\"} where var\"#s34\", DataType, Any, Module}","page":"Library","title":"PMADA.solve_dopf","text":"solve_dopf(data::Dict{String, <:Any}, model_type::DataType, optimizer, dopf_method::Module; mismatch_method::String=\"norm\", tol::Float64=1e-4, max_iteration::Int64=1000, verbose = true, kwargs...)\n\nSolve OPF problem using fully distributed algorithm. The distributed algorithm is defined by the buildmethod and updatemethod.\n\nArguments:\n\ndata::Dict{String, <:Any} : dictionary contains case in PowerModel format\nmodel_type::DataType : power flow formulation (PowerModel type)\noptimizer : optimizer JuMP initiation object\ndopf_method::Module : module contains the distributed algorithm methods as follow:\ninitialize_method::Function : initliize distributed algorithm parameters and shared variables\nupdate_method::Function : update the algorithm after each iteration\nbuild_method::Function : problem formulation\nmismatch_method::String=\"norm\" : mismatch calculation method (norm, max)\ntol::Float64=1e-4 : mismatch tolerance\nmax_iteration::Int64=1000 : maximum number of iteration\nverbose::Bool=true : print mismatch after each iteration and result summary \nprintoptimizerinfo::Bool=false : print local optimization info from the solver\nkwargs = algorithm parameters\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.solve_dopf_coordinated-Tuple{Dict{String, var\"#s28\"} where var\"#s28\", DataType, Any, Module}","page":"Library","title":"PMADA.solve_dopf_coordinated","text":"solve_dopf_coordinated(data::Dict{String, <:Any}, model_type::DataType, optimizer, model_type::DataType; mismatch_method::String=\"norm\", tol::Float64=1e-4, max_iteration::Int64=1000, verbose = true, kwargs...)\n\nSolve OPF problem using distributed algorithm with central coordinator. The distributed algorithm is defined by the dopf_method Module.\n\nArguments:\n\ndata::Dict{String, <:Any} : dictionary contains case in PowerModel format\nmodel_type::DataType : power flow formulation (PowerModel type)\noptimizer : optimizer JuMP initiation object\nmodel_type::DataType : module contains the distributed algorithm methods as follow:\ninitializemethodcoordinator::Function : initliize distributed algorithm parameters and shared variables\ninitializemethodlocal::Function : initliize distributed algorithm parameters and shared variables\nupdatemethodcoordinator::Function : update the algorithm after each iteration\nupdatemethodlocal::Function : update the algorithm after each iteration\nbuildmethodcoordinator::Function : problem formulation\nbuildmethodlocal::Function : problem formulation\nmismatch_method::String=\"norm\" : mismatch calculation method (norm, max)\ntol::Float64=1e-4, \nmax_iteration::Int64=1000, \nverbose = true,\nprintoptimizerinfo::Bool=false : print local optimization info from the solver\nkwargs = distributed algorithm parameters\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.update_flag_convergance!-Tuple{Dict{String, var\"#s82\"} where var\"#s82\", Float64}","page":"Library","title":"PMADA.update_flag_convergance!","text":"check the shared variables of a local area are within tol\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.update_global_flag_convergance-Tuple{Dict{Int64, var\"#s82\"} where var\"#s82\"}","page":"Library","title":"PMADA.update_global_flag_convergance","text":"check the flag convergence for all areas and return a global variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.update_iteration!-Tuple{Dict{String, var\"#s82\"} where var\"#s82\"}","page":"Library","title":"PMADA.update_iteration!","text":"update iteration\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.update_shared_primal!-Tuple{Dict{String, var\"#s43\"} where var\"#s43\", DataType}","page":"Library","title":"PMADA.update_shared_primal!","text":"update primal variables after obtaining a solution at each iteraton\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.update_solution!-Tuple{Dict{String, var\"#s81\"} where var\"#s81\", Dict{String, var\"#s80\"} where var\"#s80\", DataType}","page":"Library","title":"PMADA.update_solution!","text":"update the area data and local shared variables after obtaining a solution at each iteraton\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.add_virtual_gen!-Tuple{Dict{String, var\"#s109\"} where var\"#s109\", Vector{T} where T, Int64}","page":"Library","title":"PMADA.add_virtual_gen!","text":"add virtual geneartors at the neighboring buses of an area\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.assign_area!-Tuple{Dict{String, var\"#s81\"} where var\"#s81\", Dict}","page":"Library","title":"PMADA.assign_area!","text":"assign area to the PowerModel data using a dictionary with (bus => area) Int pairs\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.assign_area!-Tuple{Dict{String, var\"#s82\"} where var\"#s82\", Matrix{Int64}}","page":"Library","title":"PMADA.assign_area!","text":"assign area to the PowerModel data using a matrix with [bus, area] colmuns or rows\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.assign_area!-Tuple{Dict{String, var\"#s82\"} where var\"#s82\", String}","page":"Library","title":"PMADA.assign_area!","text":"assign area to the PowerModel data using a CVS file with buses and area id\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.assign_area!-Tuple{Dict{String, var\"#s82\"} where var\"#s82\", Vector{Pair{Int64, Int64}}}","page":"Library","title":"PMADA.assign_area!","text":"assign area to the PowerModel data using a vector with (bus => area) pairs\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.decompose_coordinator-Tuple{Dict{String, var\"#s83\"} where var\"#s83\"}","page":"Library","title":"PMADA.decompose_coordinator","text":"define system coordinator\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.decompose_system-Tuple{Dict{String, var\"#s114\"} where var\"#s114\", Int64}","page":"Library","title":"PMADA.decompose_system","text":"decompose an area with area id\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.decompose_system-Tuple{Dict{String, var\"#s81\"} where var\"#s81\"}","page":"Library","title":"PMADA.decompose_system","text":"decompose_system(data::Dict{String, <:Any})\n\ndecompose a system into areas defined by bus area.\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.receive_shared_data!-Tuple{Int64, Dict, Dict{String, var\"#s111\"} where var\"#s111\"}","page":"Library","title":"PMADA.receive_shared_data!","text":"store received data in the local data dictionary\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.receive_shared_data!-Tuple{Int64, Vector{T} where T, Dict{String, var\"#s113\"} where var\"#s113\"}","page":"Library","title":"PMADA.receive_shared_data!","text":"deserialize and store the received data in the local data\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.send_shared_data-Tuple{Int64, Int64, Dict{String, var\"#s110\"} where var\"#s110\"}","page":"Library","title":"PMADA.send_shared_data","text":"get the shared data with or without serialization\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.constraint_opf-Tuple{AbstractPowerModel}","page":"Library","title":"PMADA.constraint_opf","text":"define OPF problem constraints\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.no_objective-Tuple{AbstractPowerModel}","page":"Library","title":"PMADA.no_objective","text":"no objective function case\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.objective_min_fuel_and_consensus!","page":"Library","title":"PMADA.objective_min_fuel_and_consensus!","text":"define objective function from PowerModels and algorithm specific objective\n\n\n\n\n\n","category":"function"},{"location":"library/#PMADA.variable_opf-Tuple{AbstractPowerModel}","page":"Library","title":"PMADA.variable_opf","text":"define OPF problem variable\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.calc_dist_gen_cost-Tuple{Dict{Int64, var\"#s112\"} where var\"#s112\"}","page":"Library","title":"PMADA.calc_dist_gen_cost","text":"calculate distributed solution operation cost\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.compare_solution-Tuple{Dict{String, var\"#s111\"} where var\"#s111\", Dict{Int64, var\"#s110\"} where var\"#s110\", DataType, Any}","page":"Library","title":"PMADA.compare_solution","text":"compare the distributed algorithm solution with PowerModels centralized solution\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.partition_system!-Tuple{Dict, Int64}","page":"Library","title":"PMADA.partition_system!","text":"partition_system!(data::Dict, n::Int64; configuration::Symbol=:edge_cut, print_info::Bool=false)\n\nPartition a system into n areas using KaHyPar partition algorithm\n\nArguments:\n\ndata::Dict{String, <:Any} : dictionary contains case in PowerModel format\nn::Int : number of areas\nconfiguration::Symbol : partition meteric (:edgecut or :connectivity). The defult is :edgecut\nprint_info::Bool : print partition algorithm information\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA._initialize_shared_variable","page":"Library","title":"PMADA._initialize_shared_variable","text":"initlize shared variable dictionary\n\n\n\n\n\n","category":"function"},{"location":"library/#PMADA.initial_value","page":"Library","title":"PMADA.initial_value","text":"initial_value(data::Dict{String, <:Any}, var::String, idx::Int, method::String=\"flat\")\n\nassign initial value based on initialization method\n\nArguments:\n\ndata::Dict{String, <:Any} : dictionary contains case in PowerModel format\nvar::String : variable names\nidx::Int : variable index\nmethod::String : initialization method (\"flat\", \"previous_solution\")\n\n\n\n\n\n","category":"function"},{"location":"library/#PMADA.initialize_dual_variable_shared!-Tuple{Dict{String, var\"#s45\"} where var\"#s45\", DataType}","page":"Library","title":"PMADA.initialize_dual_variable_shared!","text":"initialize the dual shared variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.initialize_dual_variable_shared_coordinator!-Tuple{Dict{String, var\"#s45\"} where var\"#s45\", DataType}","page":"Library","title":"PMADA.initialize_dual_variable_shared_coordinator!","text":"initialize the dual shared variables for coordinator\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.initialize_dual_variable_shared_local!-Tuple{Dict{String, var\"#s45\"} where var\"#s45\", DataType}","page":"Library","title":"PMADA.initialize_dual_variable_shared_local!","text":"initialize the dual shared variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.initialize_primal_variable_shared!-Tuple{Dict{String, var\"#s45\"} where var\"#s45\", DataType}","page":"Library","title":"PMADA.initialize_primal_variable_shared!","text":"initialize the primal shared variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.initialize_primal_variable_shared_coordinator!-Tuple{Dict{String, var\"#s45\"} where var\"#s45\", DataType}","page":"Library","title":"PMADA.initialize_primal_variable_shared_coordinator!","text":"initialize the primal shared variables for coordinator\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.initialize_primal_variable_shared_local!-Tuple{Dict{String, var\"#s45\"} where var\"#s45\", DataType}","page":"Library","title":"PMADA.initialize_primal_variable_shared_local!","text":"initialize the primal shared variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.initialize_variable_shared!-Tuple{Dict{String, var\"#s45\"} where var\"#s45\", DataType}","page":"Library","title":"PMADA.initialize_variable_shared!","text":"initialize the shared variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.initialize_variable_shared_coordinator!-Tuple{Dict{String, var\"#s45\"} where var\"#s45\", DataType}","page":"Library","title":"PMADA.initialize_variable_shared_coordinator!","text":"initialize the shared variables for coordinator\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.initialize_variable_shared_local!-Tuple{Dict{String, var\"#s45\"} where var\"#s45\", DataType}","page":"Library","title":"PMADA.initialize_variable_shared_local!","text":"initialize the shared variables\n\n\n\n\n\n","category":"method"},{"location":"library/#PMADA.variable_shared_names-Tuple{DataType}","page":"Library","title":"PMADA.variable_shared_names","text":"idinifiy the nodal and cross variables names\n\n\n\n\n\n","category":"method"},{"location":"quickguide/#Quick-Start-Guide","page":"Quick Start Guide","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"AC OPF using ADMM","category":"page"},{"location":"quickguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"using PMADA\nusing Ipopt\n\nmodel_type = PMADA.ACPPowerModel\nrun_dopf_admm(\"matpower/case3.m\", model_type, Ipopt.Optimizer; tol=1e-4, max_iteration=1000, verbose = true, alpha=1000)","category":"page"},{"location":"quickguide/#Getting-Results","page":"Quick Start Guide","title":"Getting Results","text":"","category":"section"},{"location":"quickguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"Results are stored in the data dictionary contains subsystems information","category":"page"},{"location":"quickguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"result = run_dopf_admm(\"matpower/case3.m\", model_type, Ipopt.Optimizer; tol=1e-4, max_iteration=1000, verbose = true, alpha=1000)","category":"page"},{"location":"newalgorithm/#User-Defined-Algorithm","page":"User-defined Algorithm","title":"User-Defined Algorithm","text":"","category":"section"},{"location":"newalgorithm/","page":"User-defined Algorithm","title":"User-defined Algorithm","text":"TODO","category":"page"},{"location":"specification/#Problem-Specification-and-Algorithm-Selection","page":"Problem Specification and Algorithm Selection","title":"Problem Specification and Algorithm Selection","text":"","category":"section"},{"location":"specification/","page":"Problem Specification and Algorithm Selection","title":"Problem Specification and Algorithm Selection","text":"TODO","category":"page"},{"location":"specification/#Power-Flow-Formulation","page":"Problem Specification and Algorithm Selection","title":"Power Flow Formulation","text":"","category":"section"},{"location":"specification/","page":"Problem Specification and Algorithm Selection","title":"Problem Specification and Algorithm Selection","text":"TODO","category":"page"},{"location":"specification/#Optimization-Solver","page":"Problem Specification and Algorithm Selection","title":"Optimization Solver","text":"","category":"section"},{"location":"specification/","page":"Problem Specification and Algorithm Selection","title":"Problem Specification and Algorithm Selection","text":"TODO","category":"page"},{"location":"specification/#Distirbuted-Algorithm","page":"Problem Specification and Algorithm Selection","title":"Distirbuted Algorithm","text":"","category":"section"},{"location":"specification/","page":"Problem Specification and Algorithm Selection","title":"Problem Specification and Algorithm Selection","text":"TODO","category":"page"},{"location":"atc/#ATC","page":"ATC","title":"ATC","text":"","category":"section"},{"location":"atc/","page":"ATC","title":"ATC","text":"CurrentModule = PMADA","category":"page"},{"location":"atc/","page":"ATC","title":"ATC","text":"solve_dopf_atc\nsolve_dopf_atc_coordinated","category":"page"},{"location":"atc/#PMADA.solve_dopf_atc","page":"ATC","title":"PMADA.solve_dopf_atc","text":"solve_dopf_atc(data::Dict{String, <:Any}, model_type::DataType, optimizer; \nmismatch_method::String=\"norm\", tol::Float64=1e-4, max_iteration::Int64=1000, \nverbose = true, print_optimizer_info::Bool=false, alpha::Real=1000, beta::Real = 1)\n\nSolve the distributed OPF problem using ATC algorithm.\n\nArguments:\n\ndata::Dict{String, <:Any} : dictionary contains case in PowerModel format\nmodel_type::DataType : power flow formulation (PowerModel type)\noptimizer : optimizer JuMP initiation object\nmismatch_method::String=\"norm\" : mismatch calculation method (norm, max)\ntol::Float64=1e-4 : mismatch tolerance\nmax_iteration::Int64=1000 : maximum number of iteration\nverbose::Bool=true : print mismatch after each iteration and result summary \nprintoptimizerinfo::Bool=false : print local optimization info from the solver\nalpha::Real=1.05 : algorithm parameters\nbeta::Real=1.0 : algorithm parameters\n\n\n\n\n\n","category":"function"},{"location":"atc/#PMADA.solve_dopf_atc_coordinated","page":"ATC","title":"PMADA.solve_dopf_atc_coordinated","text":"solve_dopf_atc_coordinated(data::Dict{String, <:Any}, model_type::DataType, optimizer; tol::Float64=1e-4, \nmax_iteration::Int64=1000, verbose = true, alpha::Real=1000)\n\nSolve the distributed OPF problem using ATC algorithm with central coordinator.\n\nArguments:\n\ndata::Dict{String, <:Any} : dictionary contains case in PowerModel format\nmodel_type::DataType : power flow formulation (PowerModel type)\noptimizer : optimizer JuMP initiation object\nmismatch_method::String=\"norm\" : mismatch calculation method (norm, max)\ntol::Float64=1e-4 : mismatch tolerance\nmax_iteration::Int64=1000 : maximum number of iteration\nverbose::Bool=true : print mismatch after each iteration and result summary \nprintoptimizerinfo::Bool=false : print local optimization info from the solver\nalpha::Real=1.05 : algorithm parameters\nbeta::Real=1.0 : algorithm parameters\n\n\n\n\n\n","category":"function"},{"location":"atc/","page":"ATC","title":"ATC","text":"Modules = [PMADA.atc_methods, PMADA.atc_coordinated_methods]","category":"page"},{"location":"atc/#PMADA.atc_methods","page":"ATC","title":"PMADA.atc_methods","text":"ATC algorithm module contians build and update methods\n\n\n\n\n\n","category":"module"},{"location":"atc/#PMADA.atc_methods.build_method-Tuple{AbstractPowerModel}","page":"ATC","title":"PMADA.atc_methods.build_method","text":"build method for Distributed PowerModel using ATC algorithm\n\n\n\n\n\n","category":"method"},{"location":"atc/#PMADA.atc_methods.initialize_method-Tuple{Dict{String, var\"#s110\"} where var\"#s110\", DataType}","page":"ATC","title":"PMADA.atc_methods.initialize_method","text":"inilitlize the ATC algorithm\n\n\n\n\n\n","category":"method"},{"location":"atc/#PMADA.atc_methods.objective_atc-Tuple{AbstractPowerModel}","page":"ATC","title":"PMADA.atc_methods.objective_atc","text":"set the ATC algorithm objective\n\n\n\n\n\n","category":"method"},{"location":"atc/#PMADA.atc_methods.solve_method","page":"ATC","title":"PMADA.atc_methods.solve_method","text":"redefine the main call method inside the module\n\n\n\n\n\n","category":"function"},{"location":"atc/#PMADA.atc_methods.update_method-Tuple{Dict{String, var\"#s110\"} where var\"#s110\"}","page":"ATC","title":"PMADA.atc_methods.update_method","text":"update the ATC algorithm before each iteration\n\n\n\n\n\n","category":"method"},{"location":"atc/#PMADA.atc_coordinated_methods","page":"ATC","title":"PMADA.atc_coordinated_methods","text":"ATC algorithm module contians build and update methods\n\n\n\n\n\n","category":"module"},{"location":"atc/#PMADA.atc_coordinated_methods.build_method_coordinator-Tuple{AbstractPowerModel}","page":"ATC","title":"PMADA.atc_coordinated_methods.build_method_coordinator","text":"build PowerModel for ATC algorithm coordinator\n\n\n\n\n\n","category":"method"},{"location":"atc/#PMADA.atc_coordinated_methods.build_method_local-Tuple{AbstractPowerModel}","page":"ATC","title":"PMADA.atc_coordinated_methods.build_method_local","text":"build PowerModel for ATC algorithm local area\n\n\n\n\n\n","category":"method"},{"location":"atc/#PMADA.atc_coordinated_methods.initialize_method_coordinator-Tuple{Dict{String, var\"#s110\"} where var\"#s110\", DataType}","page":"ATC","title":"PMADA.atc_coordinated_methods.initialize_method_coordinator","text":"inilitlize the ATC algorithm coordinator\n\n\n\n\n\n","category":"method"},{"location":"atc/#PMADA.atc_coordinated_methods.initialize_method_local-Tuple{Dict{String, var\"#s110\"} where var\"#s110\", DataType}","page":"ATC","title":"PMADA.atc_coordinated_methods.initialize_method_local","text":"inilitlize the ATC algorithm local area\n\n\n\n\n\n","category":"method"},{"location":"atc/#PMADA.atc_coordinated_methods.objective_atc_coordinator-Tuple{AbstractPowerModel}","page":"ATC","title":"PMADA.atc_coordinated_methods.objective_atc_coordinator","text":"ATC algorithm objective local area\n\n\n\n\n\n","category":"method"},{"location":"atc/#PMADA.atc_coordinated_methods.objective_atc_local-Tuple{AbstractPowerModel}","page":"ATC","title":"PMADA.atc_coordinated_methods.objective_atc_local","text":"ATC algorithm objective coordinator\n\n\n\n\n\n","category":"method"},{"location":"atc/#PMADA.atc_coordinated_methods.solve_method","page":"ATC","title":"PMADA.atc_coordinated_methods.solve_method","text":"redefine the main call method inside the module\n\n\n\n\n\n","category":"function"},{"location":"atc/#PMADA.atc_coordinated_methods.update_method_coordinator-Tuple{Dict{String, var\"#s113\"} where var\"#s113\"}","page":"ATC","title":"PMADA.atc_coordinated_methods.update_method_coordinator","text":"update the ATC algorithm local area data before each iteration\n\n\n\n\n\n","category":"method"},{"location":"atc/#PMADA.atc_coordinated_methods.update_method_local-Tuple{Dict{String, var\"#s110\"} where var\"#s110\"}","page":"ATC","title":"PMADA.atc_coordinated_methods.update_method_local","text":"update the ATC algorithm coordinator data before each iteration\n\n\n\n\n\n","category":"method"},{"location":"admm/#ADMM","page":"ADMM","title":"ADMM","text":"","category":"section"},{"location":"admm/","page":"ADMM","title":"ADMM","text":"CurrentModule = PMADA","category":"page"},{"location":"admm/","page":"ADMM","title":"ADMM","text":"solve_dopf_admm\nsolve_dopf_admm_coordinated","category":"page"},{"location":"admm/#PMADA.solve_dopf_admm","page":"ADMM","title":"PMADA.solve_dopf_admm","text":"solve_dopf_admm(data::Dict{String, <:Any}, model_type::DataType, optimizer; \nmismatch_method::String=\"norm\", tol::Float64=1e-4, max_iteration::Int64=1000, \nverbose = true, print_optimizer_info::Bool=false, alpha::Real=1000)\n\nSolve the distributed OPF problem using ADMM algorithm.\n\nArguments:\n\ndata::Dict{String, <:Any} : dictionary contains case in PowerModel format\nmodel_type::DataType : power flow formulation (PowerModel type)\noptimizer : optimizer JuMP initiation object\nmismatch_method::String=\"norm\" : mismatch calculation method (norm, max)\ntol::Float64=1e-4 : mismatch tolerance\nmax_iteration::Int64=1000 : maximum number of iteration\nverbose::Bool=true : print mismatch after each iteration and result summary \nprintoptimizerinfo::Bool=false : print local optimization info from the solver\nalpha::Real=1000 : algorithm parameters\n\n\n\n\n\n","category":"function"},{"location":"admm/#PMADA.solve_dopf_admm_coordinated","page":"ADMM","title":"PMADA.solve_dopf_admm_coordinated","text":"solve_dopf_admm_coordinated(data::Dict{String, <:Any}, model_type::DataType, optimizer; tol::Float64=1e-4, \nmax_iteration::Int64=1000, verbose = true, alpha::Real=1000)\n\nSolve the distributed OPF problem using ADMM algorithm with central coordinator.\n\nArguments:\n\ndata::Dict{String, <:Any} : dictionary contains case in PowerModel format\nmodel_type::DataType : power flow formulation (PowerModel type)\noptimizer : optimizer JuMP initiation object\nmismatch_method::String=\"norm\" : mismatch calculation method (norm, max)\ntol::Float64=1e-4 : mismatch tolerance\nmax_iteration::Int64=1000 : maximum number of iteration\nverbose::Bool=true : print mismatch after each iteration and result summary \nprintoptimizerinfo::Bool=false : print local optimization info from the solver\nalpha::Real=1000 : algorithm parameters\n\n\n\n\n\n","category":"function"},{"location":"admm/","page":"ADMM","title":"ADMM","text":"Modules = [PMADA.admm_methods, PMADA.admm_coordinated_methods]","category":"page"},{"location":"admm/#PMADA.admm_methods","page":"ADMM","title":"PMADA.admm_methods","text":"ADMM algorithm module contians build and update methods\n\n\n\n\n\n","category":"module"},{"location":"admm/#PMADA.admm_methods.build_method-Tuple{AbstractPowerModel}","page":"ADMM","title":"PMADA.admm_methods.build_method","text":"build PowerModel using ADMM algorithm\n\n\n\n\n\n","category":"method"},{"location":"admm/#PMADA.admm_methods.initialize_method-Tuple{Dict{String, var\"#s110\"} where var\"#s110\", DataType}","page":"ADMM","title":"PMADA.admm_methods.initialize_method","text":"inilitlize the ADMM algorithm\n\n\n\n\n\n","category":"method"},{"location":"admm/#PMADA.admm_methods.objective_admm-Tuple{AbstractPowerModel}","page":"ADMM","title":"PMADA.admm_methods.objective_admm","text":"ADMM algorithm objective\n\n\n\n\n\n","category":"method"},{"location":"admm/#PMADA.admm_methods.solve_method","page":"ADMM","title":"PMADA.admm_methods.solve_method","text":"redefine the main call method inside the module\n\n\n\n\n\n","category":"function"},{"location":"admm/#PMADA.admm_methods.update_method-Tuple{Dict{String, var\"#s110\"} where var\"#s110\"}","page":"ADMM","title":"PMADA.admm_methods.update_method","text":"update the ADMM algorithm before each iteration\n\n\n\n\n\n","category":"method"},{"location":"admm/#PMADA.admm_coordinated_methods","page":"ADMM","title":"PMADA.admm_coordinated_methods","text":"ADMM algorithm module contians build and update methods\n\n\n\n\n\n","category":"module"},{"location":"admm/#PMADA.admm_coordinated_methods.build_method_coordinator-Tuple{AbstractPowerModel}","page":"ADMM","title":"PMADA.admm_coordinated_methods.build_method_coordinator","text":"build PowerModel for ADMM algorithm coordinator\n\n\n\n\n\n","category":"method"},{"location":"admm/#PMADA.admm_coordinated_methods.build_method_local-Tuple{AbstractPowerModel}","page":"ADMM","title":"PMADA.admm_coordinated_methods.build_method_local","text":"build PowerModel for ADMM algorithm local area\n\n\n\n\n\n","category":"method"},{"location":"admm/#PMADA.admm_coordinated_methods.initialize_method_coordinator-Tuple{Dict{String, var\"#s110\"} where var\"#s110\", DataType}","page":"ADMM","title":"PMADA.admm_coordinated_methods.initialize_method_coordinator","text":"inilitlize the ADMM algorithm coordinator\n\n\n\n\n\n","category":"method"},{"location":"admm/#PMADA.admm_coordinated_methods.initialize_method_local-Tuple{Dict{String, var\"#s110\"} where var\"#s110\", DataType}","page":"ADMM","title":"PMADA.admm_coordinated_methods.initialize_method_local","text":"inilitlize the ADMM algorithm local area\n\n\n\n\n\n","category":"method"},{"location":"admm/#PMADA.admm_coordinated_methods.objective_admm_coordinator-Tuple{AbstractPowerModel}","page":"ADMM","title":"PMADA.admm_coordinated_methods.objective_admm_coordinator","text":"ADMM algorithm objective local area\n\n\n\n\n\n","category":"method"},{"location":"admm/#PMADA.admm_coordinated_methods.objective_admm_local-Tuple{AbstractPowerModel}","page":"ADMM","title":"PMADA.admm_coordinated_methods.objective_admm_local","text":"ADMM algorithm objective coordinator\n\n\n\n\n\n","category":"method"},{"location":"admm/#PMADA.admm_coordinated_methods.solve_method","page":"ADMM","title":"PMADA.admm_coordinated_methods.solve_method","text":"redefine the main call method inside the module\n\n\n\n\n\n","category":"function"},{"location":"admm/#PMADA.admm_coordinated_methods.update_method_coordinator-Tuple{Dict{String, var\"#s113\"} where var\"#s113\"}","page":"ADMM","title":"PMADA.admm_coordinated_methods.update_method_coordinator","text":"update the ADMM algorithm local area data before each iteration\n\n\n\n\n\n","category":"method"},{"location":"admm/#PMADA.admm_coordinated_methods.update_method_local-Tuple{Dict{String, var\"#s110\"} where var\"#s110\"}","page":"ADMM","title":"PMADA.admm_coordinated_methods.update_method_local","text":"update the ADMM algorithm coordinator data before each iteration\n\n\n\n\n\n","category":"method"},{"location":"data_structure/#Data-Structure","page":"Data Structure","title":"Data Structure","text":"","category":"section"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"CurrentModule = PMADA","category":"page"},{"location":"data_structure/#Input-Data","page":"Data Structure","title":"Input Data","text":"","category":"section"},{"location":"data_structure/#Case","page":"Data Structure","title":"Case","text":"","category":"section"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"The input data is the same as PowerModels with one essential exeption. The buses in the PowerModels dictionary must contain area key with more than one area number. To load a data file, we use the same PowerModels methods.  The PowerModels data can be loaded as follow: ","category":"page"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"case_path = \"test/data/case14.m\"\ndata = parse_file(case_path)","category":"page"},{"location":"data_structure/#Partitioning","page":"Data Structure","title":"Partitioning","text":"","category":"section"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"To check the areas in a PowerModels data, use PMADA.get_areas_id(data) to get all areas ids in data. If the data dictionary dosen't contain more than one area, there are two methods to parition the system assign_area! or partition_system!","category":"page"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"assign_area!\npartition_system!","category":"page"},{"location":"data_structure/#PMADA.assign_area!","page":"Data Structure","title":"PMADA.assign_area!","text":"assign area to the PowerModel data using a dictionary with (bus => area) Int pairs\n\n\n\n\n\nassign area to the PowerModel data using a CVS file with buses and area id\n\n\n\n\n\nassign area to the PowerModel data using a vector with (bus => area) pairs\n\n\n\n\n\nassign area to the PowerModel data using a matrix with [bus, area] colmuns or rows\n\n\n\n\n\n","category":"function"},{"location":"data_structure/#PMADA.partition_system!","page":"Data Structure","title":"PMADA.partition_system!","text":"partition_system!(data::Dict, n::Int64; configuration::Symbol=:edge_cut, print_info::Bool=false)\n\nPartition a system into n areas using KaHyPar partition algorithm\n\nArguments:\n\ndata::Dict{String, <:Any} : dictionary contains case in PowerModel format\nn::Int : number of areas\nconfiguration::Symbol : partition meteric (:edgecut or :connectivity). The defult is :edgecut\nprint_info::Bool : print partition algorithm information\n\n\n\n\n\n","category":"function"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"An example of partition file is shown in parition example.","category":"page"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"Before running the distirbuted algorithm, PMADA.jl internally decmpose the original system into subsystems. It decuple the tie-lines by introducing dummy buses and virtual generators at the tie-lines ends. This process is pefromed using decompose_system function. ","category":"page"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"decompose_system","category":"page"},{"location":"data_structure/#PMADA.decompose_system","page":"Data Structure","title":"PMADA.decompose_system","text":"decompose_system(data::Dict{String, <:Any})\n\ndecompose a system into areas defined by bus area.\n\n\n\n\n\ndecompose an area with area id\n\n\n\n\n\n","category":"function"},{"location":"data_structure/#Output-Data","page":"Data Structure","title":"Output Data","text":"","category":"section"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"The output of the distributed algorithms is stored in a dictionary the keys are the area id and the value are the area data dictionary that contain the results. ","category":"page"},{"location":"data_structure/#Historical-Data","page":"Data Structure","title":"Historical Data","text":"","category":"section"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"TODO","category":"page"},{"location":"data_structure/#Generation-Cost","page":"Data Structure","title":"Generation Cost","text":"","category":"section"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"To calculate the objective function of the central algorithm use calc_dist_gen_cost.","category":"page"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"calc_dist_gen_cost","category":"page"},{"location":"data_structure/#PMADA.calc_dist_gen_cost","page":"Data Structure","title":"PMADA.calc_dist_gen_cost","text":"calculate distributed solution operation cost\n\n\n\n\n\n","category":"function"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"To compar the distributed algorithm objective function value with the central OPF, use compare_solution to get the absolute relative error. ","category":"page"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"compare_solution","category":"page"},{"location":"data_structure/#PMADA.compare_solution","page":"Data Structure","title":"PMADA.compare_solution","text":"compare the distributed algorithm solution with PowerModels centralized solution\n\n\n\n\n\n","category":"function"},{"location":"tutorial/#Tutorial","page":"Using PMADA","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"PMADA solve the OPF problem using either pre-defined distributed algorithm or user-defined algorithm. This page shows example of solving the OPF problem using the pre-defined algorithms and how to define a new alternating distributed algorithm. ","category":"page"},{"location":"tutorial/#Run-Distributed-Algorithm","page":"Using PMADA","title":"Run Distributed Algorithm","text":"","category":"section"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"To solve the OPF algorithm, we need first to import PMADA package and an optimization solver. In this case we use Ipopt a NLP solver. You can install the solver using using Pkg, Pkg.add(\"Ipopt\"). Then run the following code while you are inside the PMADA package directory. ","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"## Import package\nusing PMADA\nusing Ipopt ","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"Next, we need to upload a test case. We will use IEEE 14-bus system in /test/data/ folder in matpower format. The file can be loaded using parse_file from PowerModels package. The test system needs to be divided into different areas. This can be check by looking into data[\"bus\"][bus_id][\"area\"]. If not, you can use partition_system! function to divide the system or load a csv file that constains the buses and area of each bus.  ","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"\n## Read case with partition file and return dictionary of the paritioned case\ncase_path = \"test/data/case14.m\"\nparition_file_path = \"test/data/case14_2areas.csv\"\ndata = parse_file(case_path)\nassign_area!(data, parition_file_path)\n","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"Now, the case study is loaded and ready to solve the OPF problem using distirbuted algorithms. We first need to define parameters, load solver, and select power flow formulaiton model_type as follow: ","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"\n## Settings and optimizer initiation\nmax_iteration = 1000\ntol = 1e-4\nalpha = 1000\noptimizer = optimizer_with_attributes(Ipopt.Optimizer, \"print_level\"=>0)\n\n##  Power Flow Model selection\nmodel_type = DCPPowerModel\n","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"To solve the OPF problem using APP algorithm using the call function, we use the following code: ","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"##  Distributed algorithm\ndata_area = solve_dopf_admm(data, model_type, optimizer, tol=tol, max_iteration=max_iteration, verbose = false, alpha=alpha);\nerror_admm = compare_solution(data, data_area, model_type, optimizer)","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"To solve the OPF problem using APP algorithm, we use the following code: ","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"##  Distributed algorithm\ndata_area = solve_dopf_app(data, model_type, optimizer, tol=tol, max_iteration=max_iteration, verbose = false, alpha=alpha);\nerror_admm = compare_solution(data, data_area, model_type, optimizer)","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"Another way to solve the OPF problem in more controlled method. We can use the following code: ","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"\n## Import package\nusing PMADA\nusing Ipopt \n\n## Settings and optimizer initiation\nmax_iteration = 1000\ntol = 1e-4\nalpha = 1000\noptimizer = optimizer_with_attributes(Ipopt.Optimizer, \"print_level\"=>0)\n\n## Read case with partition file and return dictionary of the paritioned case\ncase_path = \"test/data/case14.m\"\nparition_file_path = \"test/data/case14_2areas.csv\"\ndata = parse_file(case_path)\nassign_area!(data, parition_file_path)\n\n## obtain areas idx\nareas_id = get_areas_id(data)\n\n## decompose the system into subsystems\ndata_area = decompose_system(data)\n\n## initilize distributed PowerModels parameters\nfor i in areas_id\n    admm_methods.initialize_method(data_area[i], model_type; tol=tol, max_iteration=max_iteration, kwargs...)\nend\n\n## initialaize the algorithms global counters\niteration = 0\nflag_convergance = false\n\n## start iteration\nwhile iteration < max_iteration && flag_convergance == false\n\n    \n    ## solve local problem and update solution\n    for i in areas_id\n        admm_methods.update_method(data_area[i])\n        solve_local!(data_area[i], model_type, optimizer, admm_methods.build_method)\n    end\n\n    ## share solution with neighbors, the shared data is first obtained to facilitate distributed implementation  \n    for i in areas_id # sender subsystem\n        for j in areas_id # receiver subsystem\n            if i != j && string(i) in keys(data_area[j][\"shared_primal\"])\n                shared_data = send_shared_data(i, j, data_area[i])\n                receive_shared_data!(i, shared_data, data_area[j])\n            end\n        end\n    end\n\n    ## calculate mismatches and update convergance flags\n    for i in areas_id\n        calc_mismatch!(data_area[i])\n        update_flag_convergance!(data_area[i], tol)\n        update_iteration!(data_area[i])\n    end\n\n    ## check global convergance and update iteration counters\n    flag_convergance = update_global_flag_convergance(data_area)\n    iteration += 1\nend\n","category":"page"},{"location":"#PMADA.jl","page":"Home","title":"PMADA.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PMADA","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PMADA.jl (Power Models Alternating Distributed Algorithms) provides a framework to solve the Optimal Power Flow (OPF) problem using alternating distributed algorithms. The package allows to use different distributed algorithms such as Alternating Direction Method of Multipliers (ADMM) or user-defined algorithms. PMADA is built on top of PowerModels.jl to define and solve the subproblems.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PMADA can be installed using the Julia package manager with","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"PMADA\")","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An example demonstrating how to code up and solve the OPF problem with distributed algorithms is found in Quick Start Guide section of the documentation.","category":"page"}]
}
