var documenterSearchIndex = {"docs":
[{"location":"aladin/#ALADIN","page":"ALADEN","title":"ALADIN","text":"","category":"section"},{"location":"aladin/","page":"ALADEN","title":"ALADEN","text":"CurrentModule = PMADA","category":"page"},{"location":"aladin/","page":"ALADEN","title":"ALADEN","text":"TODO","category":"page"},{"location":"app/#APP","page":"APP","title":"APP","text":"","category":"section"},{"location":"app/","page":"APP","title":"APP","text":"CurrentModule = PMADA","category":"page"},{"location":"app/","page":"APP","title":"APP","text":"run_dopf_app(data::Dict{String, <:Any}, model_type::Type, optimizer; tol::Float64=1e-4, max_iteration::Int64=1000, verbose = true, alpha::Real=1000)","category":"page"},{"location":"library/#Library","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/#External","page":"Library","title":"External","text":"","category":"section"},{"location":"library/#Data","page":"Library","title":"Data","text":"","category":"section"},{"location":"library/#Base","page":"Library","title":"Base","text":"","category":"section"},{"location":"library/#Internal","page":"Library","title":"Internal","text":"","category":"section"},{"location":"library/#Formulation","page":"Library","title":"Formulation","text":"","category":"section"},{"location":"library/#Update","page":"Library","title":"Update","text":"","category":"section"},{"location":"quickguide/#Quick-Start-Guide","page":"Quick Start Guide","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"AC OPF using ADMM","category":"page"},{"location":"quickguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"using PMADA\nusing Ipopt\n\nmodel_type = PMADA.ACPPowerModel\nrun_dopf_admm(\"matpower/case3.m\", model_type, Ipopt.Optimizer; tol=1e-4, max_iteration=1000, verbose = true, alpha=1000)","category":"page"},{"location":"quickguide/#Getting-Results","page":"Quick Start Guide","title":"Getting Results","text":"","category":"section"},{"location":"quickguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"Results are stored in the data dictionary contains subsystems information","category":"page"},{"location":"quickguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"result = run_dopf_admm(\"matpower/case3.m\", model_type, Ipopt.Optimizer; tol=1e-4, max_iteration=1000, verbose = true, alpha=1000)","category":"page"},{"location":"newalgorithm/#User-Defined-Algorithm","page":"User-defined Algorithm","title":"User-Defined Algorithm","text":"","category":"section"},{"location":"specification/#Problem-Specification-and-Algorithm-Selection","page":"Problem Specification and Algorithm Selection","title":"Problem Specification and Algorithm Selection","text":"","category":"section"},{"location":"specification/#Power-Flow-Formulation","page":"Problem Specification and Algorithm Selection","title":"Power Flow Formulation","text":"","category":"section"},{"location":"specification/#Optimization-Solver","page":"Problem Specification and Algorithm Selection","title":"Optimization Solver","text":"","category":"section"},{"location":"specification/#Distirbuted-Algorithm","page":"Problem Specification and Algorithm Selection","title":"Distirbuted Algorithm","text":"","category":"section"},{"location":"atc/#ATC","page":"ATC","title":"ATC","text":"","category":"section"},{"location":"atc/","page":"ATC","title":"ATC","text":"CurrentModule = PMADA","category":"page"},{"location":"atc/","page":"ATC","title":"ATC","text":"run_dopf_atc(data::Dict{String, <:Any}, model_type::Type, optimizer; tol::Float64=1e-4, max_iteration::Int64=1000, verbose = true, alpha::Real=1000)","category":"page"},{"location":"admm/#ADMM","page":"ADMM","title":"ADMM","text":"","category":"section"},{"location":"admm/","page":"ADMM","title":"ADMM","text":"CurrentModule = PMADA","category":"page"},{"location":"admm/","page":"ADMM","title":"ADMM","text":"run_dopf_admm(data::Dict{String, <:Any}, model_type::Type, optimizer; tol::Float64=1e-4, max_iteration::Int64=1000, verbose = true, alpha::Real=1000)","category":"page"},{"location":"data_structure/#Data-Structure","page":"Data Structure","title":"Data Structure","text":"","category":"section"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"CurrentModule = PMADA","category":"page"},{"location":"data_structure/#Input-Data","page":"Data Structure","title":"Input Data","text":"","category":"section"},{"location":"data_structure/#Case","page":"Data Structure","title":"Case","text":"","category":"section"},{"location":"data_structure/#Partitioning","page":"Data Structure","title":"Partitioning","text":"","category":"section"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"assign_area!(data::Dict{String, <:Any}, partition_path::String)","category":"page"},{"location":"data_structure/#PMADA.assign_area!-Tuple{Dict{String, var\"#s1\"} where var\"#s1\", String}","page":"Data Structure","title":"PMADA.assign_area!","text":"assign area to the PowerModel data using a CVS file with buses and area id\n\n\n\n\n\n","category":"method"},{"location":"data_structure/","page":"Data Structure","title":"Data Structure","text":"function decompose_system(data::Dict{String, <:Any})","category":"page"},{"location":"data_structure/#Output-Data","page":"Data Structure","title":"Output Data","text":"","category":"section"},{"location":"data_structure/#Data-Area","page":"Data Structure","title":"Data Area","text":"","category":"section"},{"location":"data_structure/#Historical-Data","page":"Data Structure","title":"Historical Data","text":"","category":"section"},{"location":"data_structure/#Generation-Cost","page":"Data Structure","title":"Generation Cost","text":"","category":"section"},{"location":"tutorial/#Tutorial","page":"Using PMADA","title":"Tutorial","text":"","category":"section"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"PMADA solve the OPF problem using either pre-defined distributed algorithm or user-defined algorithm. This page shows example of solving the OPF problem using the pre-defined algorithms and how to define a new alternating distributed algorithm. ","category":"page"},{"location":"tutorial/#Run-Distributed-Algorithm","page":"Using PMADA","title":"Run Distributed Algorithm","text":"","category":"section"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"To solve the OPF algorithm, we need first to import PMADA package and an optimization solver. In this case we use Ipopt a NLP solver. You can install the solver using using Pkg, Pkg.add(\"Ipopt\"). Then run the following code while you are inside the PMADA package directory. ","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"## Import package\nusing PMADA\nusing Ipopt ","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"Next, we need to upload a test case. We will use IEEE 14-bus system in /test/data/ folder in matpower format. The file can be loaded using parse_file from PowerModels package. The test system needs to be divided into different areas. This can be check by looking into data[\"bus\"][bus_id][\"area\"]. If not, you can use partition_system! function to divide the system or load a csv file that constains the buses and area of each bus.  ","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"\n## Read case with partition file and return dictionary of the paritioned case\ncase_path = \"test/data/case14.m\"\nparition_file_path = \"test/data/case14_2areas.csv\"\ndata = parse_file(case_path)\nassign_area!(data, parition_file_path)\n","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"Now, the case study is loaded and ready to solve the OPF problem using distirbuted algorithms. We first need to define parameters, load solver, and select power flow formulaiton model_type as follow: ","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"\n## Settings and optimizer initiation\nmax_iteration = 1000\ntol = 1e-4\nalpha = 1000\noptimizer = optimizer_with_attributes(Ipopt.Optimizer, \"print_level\"=>0)\n\n##  Power Flow Model selection\nmodel_type = DCPPowerModel\n","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"To solve the OPF problem using APP algorithm using the call function, we use the following code: ","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"##  Distributed algorithm\ndata_area = solve_dopf_admm(data, model_type, optimizer, tol=tol, max_iteration=max_iteration, verbose = false, alpha=alpha);\nerror_admm = compare_solution(data, data_area, model_type, optimizer)","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"To solve the OPF problem using APP algorithm, we use the following code: ","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"##  Distributed algorithm\ndata_area = solve_dopf_app(data, model_type, optimizer, tol=tol, max_iteration=max_iteration, verbose = false, alpha=alpha);\nerror_admm = compare_solution(data, data_area, model_type, optimizer)","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"Another way to solve the OPF problem in more controlled method. We can use the following code: ","category":"page"},{"location":"tutorial/","page":"Using PMADA","title":"Using PMADA","text":"\n## Import package\nusing PMADA\nusing Ipopt \n\n## Settings and optimizer initiation\nmax_iteration = 1000\ntol = 1e-4\nalpha = 1000\noptimizer = optimizer_with_attributes(Ipopt.Optimizer, \"print_level\"=>0)\n\n## Read case with partition file and return dictionary of the paritioned case\ncase_path = \"test/data/case14.m\"\nparition_file_path = \"test/data/case14_2areas.csv\"\ndata = parse_file(case_path)\nassign_area!(data, parition_file_path)\n\n## obtain areas idx\nareas_id = get_areas_id(data)\n\n## decompose the system into subsystems\ndata_area = decompose_system(data)\n\n## initilize distributed PowerModels parameters\nfor i in areas_id\n    admm_methods.initialize_method(data_area[i], model_type; tol=tol, max_iteration=max_iteration, kwargs...)\nend\n\n## initialaize the algorithms global counters\niteration = 0\nflag_convergance = false\n\n## start iteration\nwhile iteration < max_iteration && flag_convergance == false\n\n    \n    ## solve local problem and update solution\n    for i in areas_id\n        admm_methods.update_method(data_area[i])\n        solve_local!(data_area[i], model_type, optimizer, admm_methods.build_method)\n    end\n\n    ## share solution with neighbors, the shared data is first obtained to facilitate distributed implementation  \n    for i in areas_id # sender subsystem\n        for j in areas_id # receiver subsystem\n            if i != j && string(i) in keys(data_area[j][\"shared_primal\"])\n                shared_data = send_shared_data(i, j, data_area[i])\n                receive_shared_data!(i, shared_data, data_area[j])\n            end\n        end\n    end\n\n    ## calculate mismatches and update convergance flags\n    for i in areas_id\n        calc_mismatch!(data_area[i])\n        update_flag_convergance!(data_area[i], tol)\n        update_iteration!(data_area[i])\n    end\n\n    ## check global convergance and update iteration counters\n    flag_convergance = update_global_flag_convergance(data_area)\n    iteration += 1\nend\n","category":"page"},{"location":"#PMADA.jl","page":"Home","title":"PMADA.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PMADA","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PMADA.jl (Power Models Alternating Distributed Algorithms) provides a framework to solve the Optimal Power Flow (OPF) problem using alternating distributed algorithms. The package allows to use different distributed algorithms such as Alternating Direction Method of Multipliers (ADMM) or user-defined algorithms. PMADA is built on top of PowerModels.jl to define and solve the subproblems.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PMADA can be installed using the Julia package manager with","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"PMADA\")","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An example demonstrating how to code up and solve the OPF problem with distributed algorithms is found in Quick Start Guide section of the documentation.","category":"page"}]
}
