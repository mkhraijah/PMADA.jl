var documenterSearchIndex = {"docs":
[{"location":"quickguide/#Quick-Start-Guide","page":"Quick Start Guide","title":"Quick Start Guide","text":"","category":"section"},{"location":"quickguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"AC OPF using ADMM","category":"page"},{"location":"quickguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"using PMADA\nusing Ipopt\n\nmodel_type = PMADA.ACPPowerModel\nrun_dopf_admm(\"matpower/case3.m\", model_type, Ipopt.Optimizer; tol=1e-4, max_iteration=1000, verbose = true, alpha=1000)","category":"page"},{"location":"quickguide/#Getting-Results","page":"Quick Start Guide","title":"Getting Results","text":"","category":"section"},{"location":"quickguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"Results are stored in the data dictionary contains subsystems information","category":"page"},{"location":"quickguide/","page":"Quick Start Guide","title":"Quick Start Guide","text":"result = run_dopf_admm(\"matpower/case3.m\", model_type, Ipopt.Optimizer; tol=1e-4, max_iteration=1000, verbose = true, alpha=1000)","category":"page"},{"location":"#PMADA.jl","page":"Home","title":"PMADA.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = PMADA","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PMADA.jl (Power Models Alternating Distributed Algorithms) provides a framework to solve the Optimal Power Flow (OPF) problem using alternating distributed algorithms. The package allows to use different distributed algorithms such as Alternating Direction Method of Multipliers (ADMM) or user-defined algorithms. PMADA is built on top of PowerModels.jl to define and solve the subproblems.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"PMADA can be installed using the Julia package manager with","category":"page"},{"location":"","page":"Home","title":"Home","text":"] add PMADA","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"An example demonstrating how to code up and solve the OPF problem with distributed algorithms is found in Quick Start Guide section of the documentation.","category":"page"},{"location":"admm/#ADMM","page":"ADMM","title":"ADMM","text":"","category":"section"},{"location":"admm/","page":"ADMM","title":"ADMM","text":"CurrentModule = PMADA","category":"page"},{"location":"admm/","page":"ADMM","title":"ADMM","text":"run_dopf_admm(data::Dict{String, <:Any}, model_type::Type, optimizer; tol::Float64=1e-4, max_iteration::Int64=1000, verbose = true, alpha::Real=1000)","category":"page"},{"location":"admm/#PMADA.run_dopf_admm-Tuple{Dict{String, var\"#s1\"} where var\"#s1\", Type, Any}","page":"ADMM","title":"PMADA.run_dopf_admm","text":"run_dopf_admm(data::Dict{String, <:Any}, model_type::Type, optimizer; tol::Float64=1e-4, max_iteration::Int64=1000, verbose = true, alpha::Real=1000)\n\nSolve the distributed OPF problem using ADMM algorithm.\n\n\n\n\n\n","category":"method"}]
}
